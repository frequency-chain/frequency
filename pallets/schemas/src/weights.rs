
//! Autogenerated weights for `pallet_schemas`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 48.0.0
//! DATE: 2025-08-05, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-10-173-5-194`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// ./scripts/../target/release/frequency
// benchmark
// pallet
// --pallet=pallet_schemas
// --extrinsic
// *
// --heap-pages=4096
// --steps=20
// --repeat=10
// --output=./scripts/../pallets/schemas/src/weights.rs
// --template=./scripts/../.maintain/frame-weight-template.hbs
// --additional-trie-layers=3
// --runtime=./scripts/../target/release/wbuild/frequency-runtime/frequency_runtime.wasm
// --genesis-builder=runtime

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_schemas`.
pub trait WeightInfo {
	fn create_schema_v3_with_name(m: u32, ) -> Weight;
	fn create_schema_v3_without_name(m: u32, ) -> Weight;
	fn set_max_schema_model_bytes() -> Weight;
	fn create_schema_via_governance_v2_with_name(m: u32, ) -> Weight;
	fn create_schema_via_governance_v2_without_name(m: u32, ) -> Weight;
	fn propose_to_create_schema_v2_with_name(m: u32, ) -> Weight;
	fn propose_to_create_schema_v2_without_name(m: u32, ) -> Weight;
	fn propose_to_create_schema_name() -> Weight;
	fn create_schema_name_via_governance() -> Weight;
	fn create_intent(m: u32) -> Weight;
	fn create_intent_via_governance(m: u32) -> Weight;
	fn propose_to_create_intent() -> Weight;
	fn create_intent_group(m: u32) -> Weight;
	fn create_intent_group_via_governance(m: u32) -> Weight;
	fn propose_to_create_intent_group() -> Weight;
	fn update_intent_group(m: u32) -> Weight;
	fn update_intent_group_via_governance(m: u32) -> Weight;
	fn propose_to_update_intent_group() -> Weight;
}

/// Weights for `pallet_schemas` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Schemas::GovernanceSchemaModelMaxBytes` (r:1 w:0)
	/// Proof: `Schemas::GovernanceSchemaModelMaxBytes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::CurrentSchemaIdentifierMaximum` (r:1 w:1)
	/// Proof: `Schemas::CurrentSchemaIdentifierMaximum` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::SchemaNameToIds` (r:1 w:1)
	/// Proof: `Schemas::SchemaNameToIds` (`max_values`: None, `max_size`: Some(602), added: 3077, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::SchemaInfos` (r:0 w:1)
	/// Proof: `Schemas::SchemaInfos` (`max_values`: None, `max_size`: Some(15), added: 2490, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::SchemaPayloads` (r:0 w:1)
	/// Proof: `Schemas::SchemaPayloads` (`max_values`: None, `max_size`: Some(65514), added: 67989, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[16, 65499]`.
	fn create_schema_v3_with_name(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `316`
		//  Estimated: `4562`
		// Minimum execution time: 26_063_000 picoseconds.
		Weight::from_parts(22_877_494, 4562)
			// Standard Error: 48
			.saturating_add(Weight::from_parts(34_020, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}

	/// Storage: `Schemas::GovernanceSchemaModelMaxBytes` (r:1 w:0)
	/// Proof: `Schemas::GovernanceSchemaModelMaxBytes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::CurrentSchemaIdentifierMaximum` (r:1 w:1)
	/// Proof: `Schemas::CurrentSchemaIdentifierMaximum` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::SchemaInfos` (r:0 w:1)
	/// Proof: `Schemas::SchemaInfos` (`max_values`: None, `max_size`: Some(15), added: 2490, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::SchemaPayloads` (r:0 w:1)
	/// Proof: `Schemas::SchemaPayloads` (`max_values`: None, `max_size`: Some(65514), added: 67989, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[16, 65499]`.
	fn create_schema_v3_without_name(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `261`
		//  Estimated: `1984`
		// Minimum execution time: 16_812_000 picoseconds.
		Weight::from_parts(9_939_918, 1984)
			// Standard Error: 47
			.saturating_add(Weight::from_parts(34_024, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Schemas::GovernanceSchemaModelMaxBytes` (r:0 w:1)
	/// Proof: `Schemas::GovernanceSchemaModelMaxBytes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_max_schema_model_bytes() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_281_000 picoseconds.
		Weight::from_parts(5_410_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Schemas::GovernanceSchemaModelMaxBytes` (r:1 w:0)
	/// Proof: `Schemas::GovernanceSchemaModelMaxBytes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::CurrentSchemaIdentifierMaximum` (r:1 w:1)
	/// Proof: `Schemas::CurrentSchemaIdentifierMaximum` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::SchemaNameToIds` (r:1 w:1)
	/// Proof: `Schemas::SchemaNameToIds` (`max_values`: None, `max_size`: Some(602), added: 3077, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::SchemaInfos` (r:0 w:1)
	/// Proof: `Schemas::SchemaInfos` (`max_values`: None, `max_size`: Some(15), added: 2490, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::SchemaPayloads` (r:0 w:1)
	/// Proof: `Schemas::SchemaPayloads` (`max_values`: None, `max_size`: Some(65514), added: 67989, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[16, 65499]`.
	fn create_schema_via_governance_v2_with_name(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `316`
		//  Estimated: `4562`
		// Minimum execution time: 26_041_000 picoseconds.
		Weight::from_parts(18_843_457, 4562)
			// Standard Error: 49
			.saturating_add(Weight::from_parts(33_699, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Schemas::GovernanceSchemaModelMaxBytes` (r:1 w:0)
	/// Proof: `Schemas::GovernanceSchemaModelMaxBytes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::CurrentSchemaIdentifierMaximum` (r:1 w:1)
	/// Proof: `Schemas::CurrentSchemaIdentifierMaximum` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::SchemaInfos` (r:0 w:1)
	/// Proof: `Schemas::SchemaInfos` (`max_values`: None, `max_size`: Some(15), added: 2490, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::SchemaPayloads` (r:0 w:1)
	/// Proof: `Schemas::SchemaPayloads` (`max_values`: None, `max_size`: Some(65514), added: 67989, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[16, 65499]`.
	fn create_schema_via_governance_v2_without_name(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `261`
		//  Estimated: `1984`
		// Minimum execution time: 16_722_000 picoseconds.
		Weight::from_parts(5_343_699, 1984)
			// Standard Error: 52
			.saturating_add(Weight::from_parts(33_778, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Council::Members` (r:1 w:0)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::ProposalOf` (r:1 w:1)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Proposals` (r:1 w:1)
	/// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::ProposalCount` (r:1 w:1)
	/// Proof: `Council::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Voting` (r:0 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[16, 65499]`.
	fn propose_to_create_schema_v2_with_name(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `166`
		//  Estimated: `4126`
		// Minimum execution time: 20_014_000 picoseconds.
		Weight::from_parts(5_538_381, 4126)
			// Standard Error: 45
			.saturating_add(Weight::from_parts(3_426, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Council::Members` (r:1 w:0)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::ProposalOf` (r:1 w:1)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Proposals` (r:1 w:1)
	/// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::ProposalCount` (r:1 w:1)
	/// Proof: `Council::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Voting` (r:0 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[16, 65499]`.
	fn propose_to_create_schema_v2_without_name(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `166`
		//  Estimated: `4126`
		// Minimum execution time: 19_651_000 picoseconds.
		Weight::from_parts(4_949_777, 4126)
			// Standard Error: 45
			.saturating_add(Weight::from_parts(3_404, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Schemas::SchemaInfos` (r:1 w:0)
	/// Proof: `Schemas::SchemaInfos` (`max_values`: None, `max_size`: Some(15), added: 2490, mode: `MaxEncodedLen`)
	/// Storage: `Council::Members` (r:1 w:0)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::ProposalOf` (r:1 w:1)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Proposals` (r:1 w:1)
	/// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::ProposalCount` (r:1 w:1)
	/// Proof: `Council::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Voting` (r:0 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn propose_to_create_schema_name() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `680`
		//  Estimated: `4640`
		// Minimum execution time: 32_777_000 picoseconds.
		Weight::from_parts(34_413_000, 4640)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Schemas::SchemaInfos` (r:1 w:0)
	/// Proof: `Schemas::SchemaInfos` (`max_values`: None, `max_size`: Some(15), added: 2490, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::SchemaNameToIds` (r:1 w:1)
	/// Proof: `Schemas::SchemaNameToIds` (`max_values`: None, `max_size`: Some(602), added: 3077, mode: `MaxEncodedLen`)
	fn create_schema_name_via_governance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `569`
		//  Estimated: `4562`
		// Minimum execution time: 21_819_000 picoseconds.
		Weight::from_parts(22_217_000, 4562)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Schemas::NameToMappedEntityIds` (r:1 w:1)
	/// Proof: `Schemas::NameToMappedEntityIds` (`max_values`: None, `max_size`: Some(95), added: 2570, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::CurrentIntentIdentifierMaximum` (r:1 w:1)
	/// Proof: `Schemas::CurrentIntentIdentifierMaximum` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::IntentInfos` (r:0 w:1)
	/// Proof: `Schemas::IntentInfos` (`max_values`: None, `max_size`: Some(13), added: 2488, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[0, 2]`.
	fn create_intent(_m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `129`
		//  Estimated: `4055`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(15_000_000, 4055)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Schemas::NameToMappedEntityIds` (r:1 w:1)
	/// Proof: `Schemas::NameToMappedEntityIds` (`max_values`: None, `max_size`: Some(95), added: 2570, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::CurrentIntentIdentifierMaximum` (r:1 w:1)
	/// Proof: `Schemas::CurrentIntentIdentifierMaximum` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::IntentInfos` (r:0 w:1)
	/// Proof: `Schemas::IntentInfos` (`max_values`: None, `max_size`: Some(13), added: 2488, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[0, 2]`.
	fn create_intent_via_governance(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `129`
		//  Estimated: `4055`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(14_959_745, 4055)
			// Standard Error: 27_980
			.saturating_add(Weight::from_parts(19_067, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Council::Members` (r:1 w:0)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::ProposalOf` (r:1 w:1)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Proposals` (r:1 w:1)
	/// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::ProposalCount` (r:1 w:1)
	/// Proof: `Council::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Voting` (r:0 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn propose_to_create_intent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `166`
		//  Estimated: `4126`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(17_000_000, 4126)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Schemas::NameToMappedEntityIds` (r:1 w:1)
	/// Proof: `Schemas::NameToMappedEntityIds` (`max_values`: None, `max_size`: Some(95), added: 2570, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::IntentInfos` (r:10 w:0)
	/// Proof: `Schemas::IntentInfos` (`max_values`: None, `max_size`: Some(13), added: 2488, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::CurrentIntentGroupIdentifierMaximum` (r:1 w:1)
	/// Proof: `Schemas::CurrentIntentGroupIdentifierMaximum` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::IntentGroups` (r:0 w:1)
	/// Proof: `Schemas::IntentGroups` (`max_values`: None, `max_size`: Some(31), added: 2506, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[0, 10]`.
	fn create_intent_group(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `210 + m * (39 ±0)`
		//  Estimated: `4055 + m * (2488 ±0)`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(17_499_362, 4055)
			// Standard Error: 37_852
			.saturating_add(Weight::from_parts(2_552_879, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 2488).saturating_mul(m.into()))
	}
	/// Storage: `Schemas::NameToMappedEntityIds` (r:1 w:1)
	/// Proof: `Schemas::NameToMappedEntityIds` (`max_values`: None, `max_size`: Some(95), added: 2570, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::IntentInfos` (r:2 w:0)
	/// Proof: `Schemas::IntentInfos` (`max_values`: None, `max_size`: Some(13), added: 2488, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::CurrentIntentGroupIdentifierMaximum` (r:1 w:1)
	/// Proof: `Schemas::CurrentIntentGroupIdentifierMaximum` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::IntentGroups` (r:0 w:1)
	/// Proof: `Schemas::IntentGroups` (`max_values`: None, `max_size`: Some(31), added: 2506, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[0, 2]`.
	fn create_intent_group_via_governance(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `129 + m * (123 ±0)`
		//  Estimated: `4055 + m * (2488 ±0)`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(14_807_203, 4055)
			// Standard Error: 117_021
			.saturating_add(Weight::from_parts(5_459_745, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 2488).saturating_mul(m.into()))
	}
	/// Storage: `Council::Members` (r:1 w:0)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::ProposalOf` (r:1 w:1)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Proposals` (r:1 w:1)
	/// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::ProposalCount` (r:1 w:1)
	/// Proof: `Council::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Voting` (r:0 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn propose_to_create_intent_group() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `166`
		//  Estimated: `4126`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(18_000_000, 4126)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}

	fn update_intent_group(m: u32) -> Weight {
		todo!()
	}

	fn update_intent_group_via_governance(m: u32) -> Weight {
		todo!()
	}

	fn propose_to_update_intent_group() -> Weight {
		todo!()
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Schemas::GovernanceSchemaModelMaxBytes` (r:1 w:0)
	/// Proof: `Schemas::GovernanceSchemaModelMaxBytes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::CurrentSchemaIdentifierMaximum` (r:1 w:1)
	/// Proof: `Schemas::CurrentSchemaIdentifierMaximum` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::SchemaNameToIds` (r:1 w:1)
	/// Proof: `Schemas::SchemaNameToIds` (`max_values`: None, `max_size`: Some(602), added: 3077, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::SchemaInfos` (r:0 w:1)
	/// Proof: `Schemas::SchemaInfos` (`max_values`: None, `max_size`: Some(15), added: 2490, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::SchemaPayloads` (r:0 w:1)
	/// Proof: `Schemas::SchemaPayloads` (`max_values`: None, `max_size`: Some(65514), added: 67989, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[16, 65499]`.
	fn create_schema_v3_with_name(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `316`
		//  Estimated: `4562`
		// Minimum execution time: 26_063_000 picoseconds.
		Weight::from_parts(22_877_494, 4562)
			// Standard Error: 48
			.saturating_add(Weight::from_parts(34_020, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Schemas::GovernanceSchemaModelMaxBytes` (r:1 w:0)
	/// Proof: `Schemas::GovernanceSchemaModelMaxBytes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::CurrentSchemaIdentifierMaximum` (r:1 w:1)
	/// Proof: `Schemas::CurrentSchemaIdentifierMaximum` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::SchemaInfos` (r:0 w:1)
	/// Proof: `Schemas::SchemaInfos` (`max_values`: None, `max_size`: Some(15), added: 2490, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::SchemaPayloads` (r:0 w:1)
	/// Proof: `Schemas::SchemaPayloads` (`max_values`: None, `max_size`: Some(65514), added: 67989, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[16, 65499]`.
	fn create_schema_v3_without_name(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `261`
		//  Estimated: `1984`
		// Minimum execution time: 16_812_000 picoseconds.
		Weight::from_parts(9_939_918, 1984)
			// Standard Error: 47
			.saturating_add(Weight::from_parts(34_024, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Schemas::GovernanceSchemaModelMaxBytes` (r:0 w:1)
	/// Proof: `Schemas::GovernanceSchemaModelMaxBytes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_max_schema_model_bytes() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_281_000 picoseconds.
		Weight::from_parts(5_410_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Schemas::GovernanceSchemaModelMaxBytes` (r:1 w:0)
	/// Proof: `Schemas::GovernanceSchemaModelMaxBytes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::CurrentSchemaIdentifierMaximum` (r:1 w:1)
	/// Proof: `Schemas::CurrentSchemaIdentifierMaximum` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::SchemaNameToIds` (r:1 w:1)
	/// Proof: `Schemas::SchemaNameToIds` (`max_values`: None, `max_size`: Some(602), added: 3077, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::SchemaInfos` (r:0 w:1)
	/// Proof: `Schemas::SchemaInfos` (`max_values`: None, `max_size`: Some(15), added: 2490, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::SchemaPayloads` (r:0 w:1)
	/// Proof: `Schemas::SchemaPayloads` (`max_values`: None, `max_size`: Some(65514), added: 67989, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[16, 65499]`.
	fn create_schema_via_governance_v2_with_name(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `316`
		//  Estimated: `4562`
		// Minimum execution time: 26_041_000 picoseconds.
		Weight::from_parts(18_843_457, 4562)
			// Standard Error: 49
			.saturating_add(Weight::from_parts(33_699, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Schemas::GovernanceSchemaModelMaxBytes` (r:1 w:0)
	/// Proof: `Schemas::GovernanceSchemaModelMaxBytes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::CurrentSchemaIdentifierMaximum` (r:1 w:1)
	/// Proof: `Schemas::CurrentSchemaIdentifierMaximum` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::SchemaInfos` (r:0 w:1)
	/// Proof: `Schemas::SchemaInfos` (`max_values`: None, `max_size`: Some(15), added: 2490, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::SchemaPayloads` (r:0 w:1)
	/// Proof: `Schemas::SchemaPayloads` (`max_values`: None, `max_size`: Some(65514), added: 67989, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[16, 65499]`.
	fn create_schema_via_governance_v2_without_name(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `261`
		//  Estimated: `1984`
		// Minimum execution time: 16_722_000 picoseconds.
		Weight::from_parts(5_343_699, 1984)
			// Standard Error: 52
			.saturating_add(Weight::from_parts(33_778, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Council::Members` (r:1 w:0)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::ProposalOf` (r:1 w:1)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Proposals` (r:1 w:1)
	/// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::ProposalCount` (r:1 w:1)
	/// Proof: `Council::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Voting` (r:0 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[16, 65499]`.
	fn propose_to_create_schema_v2_with_name(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `166`
		//  Estimated: `4126`
		// Minimum execution time: 20_014_000 picoseconds.
		Weight::from_parts(5_538_381, 4126)
			// Standard Error: 45
			.saturating_add(Weight::from_parts(3_426, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Council::Members` (r:1 w:0)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::ProposalOf` (r:1 w:1)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Proposals` (r:1 w:1)
	/// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::ProposalCount` (r:1 w:1)
	/// Proof: `Council::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Voting` (r:0 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `m` is `[16, 65499]`.
	fn propose_to_create_schema_v2_without_name(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `166`
		//  Estimated: `4126`
		// Minimum execution time: 19_651_000 picoseconds.
		Weight::from_parts(4_949_777, 4126)
			// Standard Error: 45
			.saturating_add(Weight::from_parts(3_404, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Schemas::SchemaInfos` (r:1 w:0)
	/// Proof: `Schemas::SchemaInfos` (`max_values`: None, `max_size`: Some(15), added: 2490, mode: `MaxEncodedLen`)
	/// Storage: `Council::Members` (r:1 w:0)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::ProposalOf` (r:1 w:1)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Proposals` (r:1 w:1)
	/// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::ProposalCount` (r:1 w:1)
	/// Proof: `Council::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Voting` (r:0 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn propose_to_create_schema_name() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `680`
		//  Estimated: `4640`
		// Minimum execution time: 32_777_000 picoseconds.
		Weight::from_parts(34_413_000, 4640)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Schemas::SchemaInfos` (r:1 w:0)
	/// Proof: `Schemas::SchemaInfos` (`max_values`: None, `max_size`: Some(15), added: 2490, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::SchemaNameToIds` (r:1 w:1)
	/// Proof: `Schemas::SchemaNameToIds` (`max_values`: None, `max_size`: Some(602), added: 3077, mode: `MaxEncodedLen`)
	fn create_schema_name_via_governance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `569`
		//  Estimated: `4562`
		// Minimum execution time: 21_819_000 picoseconds.
		Weight::from_parts(22_217_000, 4562)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}

	/// Storage: `Schemas::NameToMappedEntityIds` (r:1 w:1)
	/// Proof: `Schemas::NameToMappedEntityIds` (`max_values`: None, `max_size`: Some(95), added: 2570, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::CurrentIntentIdentifierMaximum` (r:1 w:1)
	/// Proof: `Schemas::CurrentIntentIdentifierMaximum` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::IntentInfos` (r:0 w:1)
	/// Proof: `Schemas::IntentInfos` (`max_values`: None, `max_size`: Some(13), added: 2488, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[0, 2]`.
	fn create_intent(_m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `129`
		//  Estimated: `4055`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(15_000_000, 4055)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Schemas::NameToMappedEntityIds` (r:1 w:1)
	/// Proof: `Schemas::NameToMappedEntityIds` (`max_values`: None, `max_size`: Some(95), added: 2570, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::CurrentIntentIdentifierMaximum` (r:1 w:1)
	/// Proof: `Schemas::CurrentIntentIdentifierMaximum` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::IntentInfos` (r:0 w:1)
	/// Proof: `Schemas::IntentInfos` (`max_values`: None, `max_size`: Some(13), added: 2488, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[0, 2]`.
	fn create_intent_via_governance(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `129`
		//  Estimated: `4055`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(14_959_745, 4055)
			// Standard Error: 27_980
			.saturating_add(Weight::from_parts(19_067, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Council::Members` (r:1 w:0)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::ProposalOf` (r:1 w:1)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Proposals` (r:1 w:1)
	/// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::ProposalCount` (r:1 w:1)
	/// Proof: `Council::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Voting` (r:0 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn propose_to_create_intent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `166`
		//  Estimated: `4126`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(17_000_000, 4126)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Schemas::NameToMappedEntityIds` (r:1 w:1)
	/// Proof: `Schemas::NameToMappedEntityIds` (`max_values`: None, `max_size`: Some(95), added: 2570, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::IntentInfos` (r:10 w:0)
	/// Proof: `Schemas::IntentInfos` (`max_values`: None, `max_size`: Some(13), added: 2488, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::CurrentIntentGroupIdentifierMaximum` (r:1 w:1)
	/// Proof: `Schemas::CurrentIntentGroupIdentifierMaximum` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::IntentGroups` (r:0 w:1)
	/// Proof: `Schemas::IntentGroups` (`max_values`: None, `max_size`: Some(31), added: 2506, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[0, 10]`.
	fn create_intent_group(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `210 + m * (39 ±0)`
		//  Estimated: `4055 + m * (2488 ±0)`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(17_499_362, 4055)
			// Standard Error: 37_852
			.saturating_add(Weight::from_parts(2_552_879, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 2488).saturating_mul(m.into()))
	}
	/// Storage: `Schemas::NameToMappedEntityIds` (r:1 w:1)
	/// Proof: `Schemas::NameToMappedEntityIds` (`max_values`: None, `max_size`: Some(95), added: 2570, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::IntentInfos` (r:2 w:0)
	/// Proof: `Schemas::IntentInfos` (`max_values`: None, `max_size`: Some(13), added: 2488, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::CurrentIntentGroupIdentifierMaximum` (r:1 w:1)
	/// Proof: `Schemas::CurrentIntentGroupIdentifierMaximum` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::IntentGroups` (r:0 w:1)
	/// Proof: `Schemas::IntentGroups` (`max_values`: None, `max_size`: Some(31), added: 2506, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[0, 2]`.
	fn create_intent_group_via_governance(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `129 + m * (123 ±0)`
		//  Estimated: `4055 + m * (2488 ±0)`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(14_807_203, 4055)
			// Standard Error: 117_021
			.saturating_add(Weight::from_parts(5_459_745, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 2488).saturating_mul(m.into()))
	}
	/// Storage: `Council::Members` (r:1 w:0)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::ProposalOf` (r:1 w:1)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Proposals` (r:1 w:1)
	/// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::ProposalCount` (r:1 w:1)
	/// Proof: `Council::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Voting` (r:0 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn propose_to_create_intent_group() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `166`
		//  Estimated: `4126`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(18_000_000, 4126)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}

	fn update_intent_group(m: u32) -> Weight {
		todo!()
	}

	fn update_intent_group_via_governance(m: u32) -> Weight {
		todo!()
	}

	fn propose_to_update_intent_group() -> Weight {
		todo!()
	}
}


#[cfg(test)]
mod tests {
  use frame_support::{traits::Get, weights::Weight, dispatch::DispatchClass};
  use common_runtime::constants::{MAXIMUM_BLOCK_WEIGHT, NORMAL_DISPATCH_RATIO};
  use common_runtime::weights::extrinsic_weights::ExtrinsicBaseWeight;

  #[allow(dead_code)]
  struct BlockWeights;
  impl Get<frame_system::limits::BlockWeights> for BlockWeights {
  	fn get() -> frame_system::limits::BlockWeights {
  		frame_system::limits::BlockWeights::builder()
  			.base_block(Weight::zero())
  			.for_class(DispatchClass::all(), |weights| {
  				weights.base_extrinsic = ExtrinsicBaseWeight::get();
  			})
  			.for_class(DispatchClass::non_mandatory(), |weights| {
  				weights.max_total = Some(NORMAL_DISPATCH_RATIO * MAXIMUM_BLOCK_WEIGHT);
  			})
  			.build_or_panic()
  	}
  }

	#[test]
	fn test_create_schema_v3_with_name() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4562
		);
	}
	#[test]
	fn test_create_schema_v3_without_name() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 1984
		);
	}
	#[test]
	fn test_create_schema_via_governance_v2_with_name() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4562
		);
	}
	#[test]
	fn test_create_schema_via_governance_v2_without_name() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 1984
		);
	}
	#[test]
	fn test_propose_to_create_schema_v2_with_name() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4126
		);
	}
	#[test]
	fn test_propose_to_create_schema_v2_without_name() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4126
		);
	}
	#[test]
	fn test_propose_to_create_schema_name() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4640
		);
	}
	#[test]
	fn test_create_schema_name_via_governance() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4562
		);
	}
	#[test]
	fn test_create_intent() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4055
		);
	}
	#[test]
	fn test_create_intent_via_governance() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4055
		);
	}
	#[test]
	fn test_propose_to_create_intent() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4126
		);
	}
	#[test]
	fn test_create_intent_group() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4055
		);
	}
	#[test]
	fn test_create_intent_group_via_governance() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4055
		);
	}
	#[test]
	fn test_propose_to_create_intent_group() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4126
		);
	}
}
