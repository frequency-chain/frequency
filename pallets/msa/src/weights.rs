
//! Autogenerated weights for `pallet_msa`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 48.0.0
//! DATE: 2025-09-16, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-10-173-5-194`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// ./scripts/../target/release/frequency
// benchmark
// pallet
// --pallet=pallet_msa
// --extrinsic
// *
// --heap-pages=4096
// --steps=20
// --repeat=10
// --output=./scripts/../pallets/msa/src/weights.rs
// --template=./scripts/../.maintain/frame-weight-template.hbs
// --additional-trie-layers=3
// --runtime=./scripts/../target/release/wbuild/frequency-runtime/frequency_runtime.wasm
// --genesis-builder=runtime

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_msa`.
pub trait WeightInfo {
	fn create() -> Weight;
	fn create_sponsored_account_with_delegation(s: u32, ) -> Weight;
	fn revoke_delegation_by_provider() -> Weight;
	fn add_public_key_to_msa() -> Weight;
	fn delete_msa_public_key() -> Weight;
	fn retire_msa() -> Weight;
	fn grant_delegation(s: u32, ) -> Weight;
	fn revoke_delegation_by_delegator() -> Weight;
	fn create_provider() -> Weight;
	fn create_provider_via_governance_v2(n: u32, m: u32, ) -> Weight;
	fn propose_to_be_provider_v2() -> Weight;
	fn reindex_offchain() -> Weight;
	fn withdraw_tokens() -> Weight;
	fn add_recovery_commitment() -> Weight;
	fn remove_recovery_provider() -> Weight;
	fn approve_recovery_provider() -> Weight;
	fn check_free_extrinsic_use_revoke_delegation_by_provider() -> Weight;
	fn check_free_extrinsic_use_revoke_delegation_by_delegator() -> Weight;
	fn check_free_extrinsic_use_delete_msa_public_key() -> Weight;
	fn check_free_extrinsic_use_retire_msa() -> Weight;
	fn check_free_extrinsic_use_withdraw_tokens() -> Weight;
	fn recover_account() -> Weight;
	fn propose_to_add_application() -> Weight;
	fn create_application_via_governance(n: u32, m: u32, ) -> Weight;
	fn upload_logo() -> Weight;
	fn propose_to_update_provider() -> Weight;
	fn update_application_via_governance() -> Weight;
	fn propose_to_update_application() -> Weight;
	fn update_provider_via_governance() -> Weight;
}

/// Weights for `pallet_msa` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Msa::CurrentMsaIdentifierMaximum` (r:1 w:1)
	/// Proof: `Msa::CurrentMsaIdentifierMaximum` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:1)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PublicKeyCountForMsaId` (r:1 w:1)
	/// Proof: `Msa::PublicKeyCountForMsaId` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	fn create() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `4008`
		// Minimum execution time: 14_646_000 picoseconds.
		Weight::from_parts(15_170_000, 4008)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Msa::PayloadSignatureRegistryList` (r:2 w:2)
	/// Proof: `Msa::PayloadSignatureRegistryList` (`max_values`: Some(50000), `max_size`: Some(144), added: 2124, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PayloadSignatureRegistryPointer` (r:1 w:1)
	/// Proof: `Msa::PayloadSignatureRegistryPointer` (`max_values`: Some(1), `max_size`: Some(140), added: 635, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PublicKeyToMsaId` (r:2 w:1)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ProviderToRegistryEntryV2` (r:1 w:0)
	/// Proof: `Msa::ProviderToRegistryEntryV2` (`max_values`: None, `max_size`: Some(3762), added: 6237, mode: `MaxEncodedLen`)
	/// Storage: `Msa::CurrentMsaIdentifierMaximum` (r:1 w:1)
	/// Proof: `Msa::CurrentMsaIdentifierMaximum` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PublicKeyCountForMsaId` (r:1 w:1)
	/// Proof: `Msa::PublicKeyCountForMsaId` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	/// Storage: `Msa::DelegatorAndProviderToDelegation` (r:1 w:1)
	/// Proof: `Msa::DelegatorAndProviderToDelegation` (`max_values`: None, `max_size`: Some(217), added: 2692, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::CurrentSchemaIdentifierMaximum` (r:1 w:0)
	/// Proof: `Schemas::CurrentSchemaIdentifierMaximum` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 30]`.
	fn create_sponsored_account_with_delegation(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1260`
		//  Estimated: `7722`
		// Minimum execution time: 150_918_000 picoseconds.
		Weight::from_parts(156_560_424, 7722)
			// Standard Error: 41_395
			.saturating_add(Weight::from_parts(95_684, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::DelegatorAndProviderToDelegation` (r:1 w:1)
	/// Proof: `Msa::DelegatorAndProviderToDelegation` (`max_values`: None, `max_size`: Some(217), added: 2692, mode: `MaxEncodedLen`)
	fn revoke_delegation_by_provider() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `161`
		//  Estimated: `4177`
		// Minimum execution time: 18_307_000 picoseconds.
		Weight::from_parts(19_262_000, 4177)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Msa::PayloadSignatureRegistryList` (r:4 w:4)
	/// Proof: `Msa::PayloadSignatureRegistryList` (`max_values`: Some(50000), `max_size`: Some(144), added: 2124, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PayloadSignatureRegistryPointer` (r:1 w:1)
	/// Proof: `Msa::PayloadSignatureRegistryPointer` (`max_values`: Some(1), `max_size`: Some(140), added: 635, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PublicKeyToMsaId` (r:2 w:1)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PublicKeyCountForMsaId` (r:1 w:1)
	/// Proof: `Msa::PublicKeyCountForMsaId` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	fn add_public_key_to_msa() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1541`
		//  Estimated: `9981`
		// Minimum execution time: 237_352_000 picoseconds.
		Weight::from_parts(244_442_000, 9981)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:2 w:1)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PublicKeyCountForMsaId` (r:1 w:1)
	/// Proof: `Msa::PublicKeyCountForMsaId` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	fn delete_msa_public_key() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `254`
		//  Estimated: `6531`
		// Minimum execution time: 30_587_000 picoseconds.
		Weight::from_parts(31_219_000, 6531)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:1)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PublicKeyCountForMsaId` (r:1 w:1)
	/// Proof: `Msa::PublicKeyCountForMsaId` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	fn retire_msa() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `71`
		//  Estimated: `4008`
		// Minimum execution time: 21_649_000 picoseconds.
		Weight::from_parts(22_332_000, 4008)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Msa::PayloadSignatureRegistryList` (r:2 w:2)
	/// Proof: `Msa::PayloadSignatureRegistryList` (`max_values`: Some(50000), `max_size`: Some(144), added: 2124, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PayloadSignatureRegistryPointer` (r:1 w:1)
	/// Proof: `Msa::PayloadSignatureRegistryPointer` (`max_values`: Some(1), `max_size`: Some(140), added: 635, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PublicKeyToMsaId` (r:2 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ProviderToRegistryEntryV2` (r:1 w:0)
	/// Proof: `Msa::ProviderToRegistryEntryV2` (`max_values`: None, `max_size`: Some(3762), added: 6237, mode: `MaxEncodedLen`)
	/// Storage: `Msa::DelegatorAndProviderToDelegation` (r:1 w:1)
	/// Proof: `Msa::DelegatorAndProviderToDelegation` (`max_values`: None, `max_size`: Some(217), added: 2692, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::CurrentSchemaIdentifierMaximum` (r:1 w:0)
	/// Proof: `Schemas::CurrentSchemaIdentifierMaximum` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 30]`.
	fn grant_delegation(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1306`
		//  Estimated: `7722`
		// Minimum execution time: 142_285_000 picoseconds.
		Weight::from_parts(145_891_901, 7722)
			// Standard Error: 31_703
			.saturating_add(Weight::from_parts(160_294, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::DelegatorAndProviderToDelegation` (r:1 w:1)
	/// Proof: `Msa::DelegatorAndProviderToDelegation` (`max_values`: None, `max_size`: Some(217), added: 2692, mode: `MaxEncodedLen`)
	fn revoke_delegation_by_delegator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `161`
		//  Estimated: `4177`
		// Minimum execution time: 18_647_000 picoseconds.
		Weight::from_parts(19_033_000, 4177)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ProviderToRegistryEntryV2` (r:1 w:1)
	/// Proof: `Msa::ProviderToRegistryEntryV2` (`max_values`: None, `max_size`: Some(3762), added: 6237, mode: `MaxEncodedLen`)
	fn create_provider() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `67`
		//  Estimated: `7722`
		// Minimum execution time: 12_882_000 picoseconds.
		Weight::from_parts(13_631_000, 7722)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ProviderToRegistryEntryV2` (r:1 w:1)
	/// Proof: `Msa::ProviderToRegistryEntryV2` (`max_values`: None, `max_size`: Some(3762), added: 6237, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ApprovedLogos` (r:0 w:1)
	/// Proof: `Msa::ApprovedLogos` (`max_values`: None, `max_size`: Some(131150), added: 133625, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 10]`.
	/// The range of component `m` is `[0, 10]`.
	fn create_provider_via_governance_v2(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `67`
		//  Estimated: `7722`
		// Minimum execution time: 20_421_000 picoseconds.
		Weight::from_parts(19_387_965, 7722)
			// Standard Error: 11_580
			.saturating_add(Weight::from_parts(251_230, 0).saturating_mul(n.into()))
			// Standard Error: 11_580
			.saturating_add(Weight::from_parts(1_933_115, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Council::ProposalOf` (r:1 w:1)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Proposals` (r:1 w:1)
	/// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::ProposalCount` (r:1 w:1)
	/// Proof: `Council::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Voting` (r:0 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn propose_to_be_provider_v2() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147`
		//  Estimated: `4107`
		// Minimum execution time: 40_547_000 picoseconds.
		Weight::from_parts(41_747_000, 4107)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	fn reindex_offchain() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_881_000 picoseconds.
		Weight::from_parts(6_178_000, 0)
	}
	/// Storage: `Msa::PayloadSignatureRegistryList` (r:2 w:2)
	/// Proof: `Msa::PayloadSignatureRegistryList` (`max_values`: Some(50000), `max_size`: Some(144), added: 2124, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PayloadSignatureRegistryPointer` (r:1 w:1)
	/// Proof: `Msa::PayloadSignatureRegistryPointer` (`max_values`: Some(1), `max_size`: Some(140), added: 635, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn withdraw_tokens() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1233`
		//  Estimated: `6691`
		// Minimum execution time: 84_513_000 picoseconds.
		Weight::from_parts(86_349_000, 6691)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `Msa::PayloadSignatureRegistryList` (r:2 w:2)
	/// Proof: `Msa::PayloadSignatureRegistryList` (`max_values`: Some(50000), `max_size`: Some(144), added: 2124, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PayloadSignatureRegistryPointer` (r:1 w:1)
	/// Proof: `Msa::PayloadSignatureRegistryPointer` (`max_values`: Some(1), `max_size`: Some(140), added: 635, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::MsaIdToRecoveryCommitment` (r:0 w:1)
	/// Proof: `Msa::MsaIdToRecoveryCommitment` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	fn add_recovery_commitment() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1112`
		//  Estimated: `5733`
		// Minimum execution time: 125_320_000 picoseconds.
		Weight::from_parts(127_783_000, 5733)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Msa::RecoveryProviders` (r:0 w:1)
	/// Proof: `Msa::RecoveryProviders` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	fn remove_recovery_provider() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_245_000 picoseconds.
		Weight::from_parts(7_548_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ProviderToRegistryEntryV2` (r:1 w:0)
	/// Proof: `Msa::ProviderToRegistryEntryV2` (`max_values`: None, `max_size`: Some(3762), added: 6237, mode: `MaxEncodedLen`)
	/// Storage: `Msa::RecoveryProviders` (r:1 w:1)
	/// Proof: `Msa::RecoveryProviders` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	fn approve_recovery_provider() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `78`
		//  Estimated: `7722`
		// Minimum execution time: 16_919_000 picoseconds.
		Weight::from_parts(17_204_000, 7722)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::DelegatorAndProviderToDelegation` (r:1 w:0)
	/// Proof: `Msa::DelegatorAndProviderToDelegation` (`max_values`: None, `max_size`: Some(217), added: 2692, mode: `MaxEncodedLen`)
	fn check_free_extrinsic_use_revoke_delegation_by_provider() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `161`
		//  Estimated: `4177`
		// Minimum execution time: 12_349_000 picoseconds.
		Weight::from_parts(12_619_000, 4177)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::DelegatorAndProviderToDelegation` (r:1 w:0)
	/// Proof: `Msa::DelegatorAndProviderToDelegation` (`max_values`: None, `max_size`: Some(217), added: 2692, mode: `MaxEncodedLen`)
	fn check_free_extrinsic_use_revoke_delegation_by_delegator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `161`
		//  Estimated: `4177`
		// Minimum execution time: 12_176_000 picoseconds.
		Weight::from_parts(12_702_000, 4177)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:2 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	fn check_free_extrinsic_use_delete_msa_public_key() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `124`
		//  Estimated: `6531`
		// Minimum execution time: 11_320_000 picoseconds.
		Weight::from_parts(11_833_000, 6531)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ProviderToRegistryEntryV2` (r:1 w:0)
	/// Proof: `Msa::ProviderToRegistryEntryV2` (`max_values`: None, `max_size`: Some(3762), added: 6237, mode: `MaxEncodedLen`)
	/// Storage: `Handles::MSAIdToDisplayName` (r:1 w:0)
	/// Proof: `Handles::MSAIdToDisplayName` (`max_values`: None, `max_size`: Some(59), added: 2534, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PublicKeyCountForMsaId` (r:1 w:0)
	/// Proof: `Msa::PublicKeyCountForMsaId` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	/// Storage: `Msa::DelegatorAndProviderToDelegation` (r:1 w:0)
	/// Proof: `Msa::DelegatorAndProviderToDelegation` (`max_values`: None, `max_size`: Some(217), added: 2692, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn check_free_extrinsic_use_retire_msa() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `113`
		//  Estimated: `7722`
		// Minimum execution time: 23_213_000 picoseconds.
		Weight::from_parts(23_944_000, 7722)
			.saturating_add(T::DbWeight::get().reads(6_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:2 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PayloadSignatureRegistryList` (r:1 w:0)
	/// Proof: `Msa::PayloadSignatureRegistryList` (`max_values`: Some(50000), `max_size`: Some(144), added: 2124, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PayloadSignatureRegistryPointer` (r:1 w:0)
	/// Proof: `Msa::PayloadSignatureRegistryPointer` (`max_values`: Some(1), `max_size`: Some(140), added: 635, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn check_free_extrinsic_use_withdraw_tokens() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `753`
		//  Estimated: `6531`
		// Minimum execution time: 125_126_000 picoseconds.
		Weight::from_parts(127_954_000, 6531)
			.saturating_add(T::DbWeight::get().reads(5_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:2 w:1)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::RecoveryProviders` (r:1 w:0)
	/// Proof: `Msa::RecoveryProviders` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	/// Storage: `Msa::MsaIdToRecoveryCommitment` (r:1 w:1)
	/// Proof: `Msa::MsaIdToRecoveryCommitment` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PayloadSignatureRegistryList` (r:2 w:2)
	/// Proof: `Msa::PayloadSignatureRegistryList` (`max_values`: Some(50000), `max_size`: Some(144), added: 2124, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PayloadSignatureRegistryPointer` (r:1 w:1)
	/// Proof: `Msa::PayloadSignatureRegistryPointer` (`max_values`: Some(1), `max_size`: Some(140), added: 635, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PublicKeyCountForMsaId` (r:1 w:1)
	/// Proof: `Msa::PublicKeyCountForMsaId` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	fn recover_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1224`
		//  Estimated: `6531`
		// Minimum execution time: 153_589_000 picoseconds.
		Weight::from_parts(162_426_000, 6531)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ProviderToRegistryEntryV2` (r:1 w:0)
	/// Proof: `Msa::ProviderToRegistryEntryV2` (`max_values`: None, `max_size`: Some(3762), added: 6237, mode: `MaxEncodedLen`)
	/// Storage: `Council::ProposalOf` (r:1 w:1)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Proposals` (r:1 w:1)
	/// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::ProposalCount` (r:1 w:1)
	/// Proof: `Council::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Voting` (r:0 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn propose_to_add_application() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `155`
		//  Estimated: `7722`
		// Minimum execution time: 44_983_000 picoseconds.
		Weight::from_parts(46_738_000, 7722)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ProviderToRegistryEntryV2` (r:1 w:0)
	/// Proof: `Msa::ProviderToRegistryEntryV2` (`max_values`: None, `max_size`: Some(3762), added: 6237, mode: `MaxEncodedLen`)
	/// Storage: `Msa::NextApplicationIndex` (r:1 w:1)
	/// Proof: `Msa::NextApplicationIndex` (`max_values`: None, `max_size`: Some(18), added: 2493, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ProviderToApplicationRegistry` (r:1 w:1)
	/// Proof: `Msa::ProviderToApplicationRegistry` (`max_values`: None, `max_size`: Some(3772), added: 6247, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ApprovedLogos` (r:0 w:1)
	/// Proof: `Msa::ApprovedLogos` (`max_values`: None, `max_size`: Some(131150), added: 133625, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 10]`.
	/// The range of component `m` is `[0, 10]`.
	fn create_application_via_governance(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `79`
		//  Estimated: `7732`
		// Minimum execution time: 31_459_000 picoseconds.
		Weight::from_parts(32_485_956, 7732)
			// Standard Error: 61_742
			.saturating_add(Weight::from_parts(27_105, 0).saturating_mul(n.into()))
			// Standard Error: 61_742
			.saturating_add(Weight::from_parts(1_997_662, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ProviderToRegistryEntryV2` (r:1 w:0)
	/// Proof: `Msa::ProviderToRegistryEntryV2` (`max_values`: None, `max_size`: Some(3762), added: 6237, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ApprovedLogos` (r:1 w:1)
	/// Proof: `Msa::ApprovedLogos` (`max_values`: None, `max_size`: Some(131150), added: 133625, mode: `MaxEncodedLen`)
	fn upload_logo() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `123`
		//  Estimated: `135110`
		// Minimum execution time: 289_928_000 picoseconds.
		Weight::from_parts(301_312_000, 135110)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ProviderToRegistryEntryV2` (r:1 w:0)
	/// Proof: `Msa::ProviderToRegistryEntryV2` (`max_values`: None, `max_size`: Some(3762), added: 6237, mode: `MaxEncodedLen`)
	/// Storage: `Council::ProposalOf` (r:1 w:1)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Proposals` (r:1 w:1)
	/// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::ProposalCount` (r:1 w:1)
	/// Proof: `Council::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Voting` (r:0 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn propose_to_update_provider() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `155`
		//  Estimated: `7722`
		// Minimum execution time: 43_766_000 picoseconds.
		Weight::from_parts(45_476_000, 7722)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ProviderToRegistryEntryV2` (r:1 w:0)
	/// Proof: `Msa::ProviderToRegistryEntryV2` (`max_values`: None, `max_size`: Some(3762), added: 6237, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ProviderToApplicationRegistry` (r:1 w:1)
	/// Proof: `Msa::ProviderToApplicationRegistry` (`max_values`: None, `max_size`: Some(3772), added: 6247, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ApprovedLogos` (r:0 w:1)
	/// Proof: `Msa::ApprovedLogos` (`max_values`: None, `max_size`: Some(131150), added: 133625, mode: `MaxEncodedLen`)
	fn update_application_via_governance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `852`
		//  Estimated: `7732`
		// Minimum execution time: 75_338_000 picoseconds.
		Weight::from_parts(76_360_000, 7732)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ProviderToRegistryEntryV2` (r:1 w:0)
	/// Proof: `Msa::ProviderToRegistryEntryV2` (`max_values`: None, `max_size`: Some(3762), added: 6237, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ProviderToApplicationRegistry` (r:1 w:0)
	/// Proof: `Msa::ProviderToApplicationRegistry` (`max_values`: None, `max_size`: Some(3772), added: 6247, mode: `MaxEncodedLen`)
	/// Storage: `Council::ProposalOf` (r:1 w:1)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Proposals` (r:1 w:1)
	/// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::ProposalCount` (r:1 w:1)
	/// Proof: `Council::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Voting` (r:0 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn propose_to_update_application() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `173`
		//  Estimated: `7732`
		// Minimum execution time: 48_518_000 picoseconds.
		Weight::from_parts(49_509_000, 7732)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ProviderToRegistryEntryV2` (r:1 w:1)
	/// Proof: `Msa::ProviderToRegistryEntryV2` (`max_values`: None, `max_size`: Some(3762), added: 6237, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ApprovedLogos` (r:0 w:1)
	/// Proof: `Msa::ApprovedLogos` (`max_values`: None, `max_size`: Some(131150), added: 133625, mode: `MaxEncodedLen`)
	fn update_provider_via_governance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `833`
		//  Estimated: `7722`
		// Minimum execution time: 56_798_000 picoseconds.
		Weight::from_parts(57_982_000, 7722)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Msa::CurrentMsaIdentifierMaximum` (r:1 w:1)
	/// Proof: `Msa::CurrentMsaIdentifierMaximum` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:1)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PublicKeyCountForMsaId` (r:1 w:1)
	/// Proof: `Msa::PublicKeyCountForMsaId` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	fn create() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `4008`
		// Minimum execution time: 14_646_000 picoseconds.
		Weight::from_parts(15_170_000, 4008)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Msa::PayloadSignatureRegistryList` (r:2 w:2)
	/// Proof: `Msa::PayloadSignatureRegistryList` (`max_values`: Some(50000), `max_size`: Some(144), added: 2124, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PayloadSignatureRegistryPointer` (r:1 w:1)
	/// Proof: `Msa::PayloadSignatureRegistryPointer` (`max_values`: Some(1), `max_size`: Some(140), added: 635, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PublicKeyToMsaId` (r:2 w:1)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ProviderToRegistryEntryV2` (r:1 w:0)
	/// Proof: `Msa::ProviderToRegistryEntryV2` (`max_values`: None, `max_size`: Some(3762), added: 6237, mode: `MaxEncodedLen`)
	/// Storage: `Msa::CurrentMsaIdentifierMaximum` (r:1 w:1)
	/// Proof: `Msa::CurrentMsaIdentifierMaximum` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PublicKeyCountForMsaId` (r:1 w:1)
	/// Proof: `Msa::PublicKeyCountForMsaId` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	/// Storage: `Msa::DelegatorAndProviderToDelegation` (r:1 w:1)
	/// Proof: `Msa::DelegatorAndProviderToDelegation` (`max_values`: None, `max_size`: Some(217), added: 2692, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::CurrentSchemaIdentifierMaximum` (r:1 w:0)
	/// Proof: `Schemas::CurrentSchemaIdentifierMaximum` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 30]`.
	fn create_sponsored_account_with_delegation(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1260`
		//  Estimated: `7722`
		// Minimum execution time: 150_918_000 picoseconds.
		Weight::from_parts(156_560_424, 7722)
			// Standard Error: 41_395
			.saturating_add(Weight::from_parts(95_684, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::DelegatorAndProviderToDelegation` (r:1 w:1)
	/// Proof: `Msa::DelegatorAndProviderToDelegation` (`max_values`: None, `max_size`: Some(217), added: 2692, mode: `MaxEncodedLen`)
	fn revoke_delegation_by_provider() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `161`
		//  Estimated: `4177`
		// Minimum execution time: 18_307_000 picoseconds.
		Weight::from_parts(19_262_000, 4177)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Msa::PayloadSignatureRegistryList` (r:4 w:4)
	/// Proof: `Msa::PayloadSignatureRegistryList` (`max_values`: Some(50000), `max_size`: Some(144), added: 2124, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PayloadSignatureRegistryPointer` (r:1 w:1)
	/// Proof: `Msa::PayloadSignatureRegistryPointer` (`max_values`: Some(1), `max_size`: Some(140), added: 635, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PublicKeyToMsaId` (r:2 w:1)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PublicKeyCountForMsaId` (r:1 w:1)
	/// Proof: `Msa::PublicKeyCountForMsaId` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	fn add_public_key_to_msa() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1541`
		//  Estimated: `9981`
		// Minimum execution time: 237_352_000 picoseconds.
		Weight::from_parts(244_442_000, 9981)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:2 w:1)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PublicKeyCountForMsaId` (r:1 w:1)
	/// Proof: `Msa::PublicKeyCountForMsaId` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	fn delete_msa_public_key() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `254`
		//  Estimated: `6531`
		// Minimum execution time: 30_587_000 picoseconds.
		Weight::from_parts(31_219_000, 6531)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:1)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PublicKeyCountForMsaId` (r:1 w:1)
	/// Proof: `Msa::PublicKeyCountForMsaId` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	fn retire_msa() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `71`
		//  Estimated: `4008`
		// Minimum execution time: 21_649_000 picoseconds.
		Weight::from_parts(22_332_000, 4008)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Msa::PayloadSignatureRegistryList` (r:2 w:2)
	/// Proof: `Msa::PayloadSignatureRegistryList` (`max_values`: Some(50000), `max_size`: Some(144), added: 2124, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PayloadSignatureRegistryPointer` (r:1 w:1)
	/// Proof: `Msa::PayloadSignatureRegistryPointer` (`max_values`: Some(1), `max_size`: Some(140), added: 635, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PublicKeyToMsaId` (r:2 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ProviderToRegistryEntryV2` (r:1 w:0)
	/// Proof: `Msa::ProviderToRegistryEntryV2` (`max_values`: None, `max_size`: Some(3762), added: 6237, mode: `MaxEncodedLen`)
	/// Storage: `Msa::DelegatorAndProviderToDelegation` (r:1 w:1)
	/// Proof: `Msa::DelegatorAndProviderToDelegation` (`max_values`: None, `max_size`: Some(217), added: 2692, mode: `MaxEncodedLen`)
	/// Storage: `Schemas::CurrentSchemaIdentifierMaximum` (r:1 w:0)
	/// Proof: `Schemas::CurrentSchemaIdentifierMaximum` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 30]`.
	fn grant_delegation(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1306`
		//  Estimated: `7722`
		// Minimum execution time: 142_285_000 picoseconds.
		Weight::from_parts(145_891_901, 7722)
			// Standard Error: 31_703
			.saturating_add(Weight::from_parts(160_294, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::DelegatorAndProviderToDelegation` (r:1 w:1)
	/// Proof: `Msa::DelegatorAndProviderToDelegation` (`max_values`: None, `max_size`: Some(217), added: 2692, mode: `MaxEncodedLen`)
	fn revoke_delegation_by_delegator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `161`
		//  Estimated: `4177`
		// Minimum execution time: 18_647_000 picoseconds.
		Weight::from_parts(19_033_000, 4177)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ProviderToRegistryEntryV2` (r:1 w:1)
	/// Proof: `Msa::ProviderToRegistryEntryV2` (`max_values`: None, `max_size`: Some(3762), added: 6237, mode: `MaxEncodedLen`)
	fn create_provider() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `67`
		//  Estimated: `7722`
		// Minimum execution time: 12_882_000 picoseconds.
		Weight::from_parts(13_631_000, 7722)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ProviderToRegistryEntryV2` (r:1 w:1)
	/// Proof: `Msa::ProviderToRegistryEntryV2` (`max_values`: None, `max_size`: Some(3762), added: 6237, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ApprovedLogos` (r:0 w:1)
	/// Proof: `Msa::ApprovedLogos` (`max_values`: None, `max_size`: Some(131150), added: 133625, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 10]`.
	/// The range of component `m` is `[0, 10]`.
	fn create_provider_via_governance_v2(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `67`
		//  Estimated: `7722`
		// Minimum execution time: 20_421_000 picoseconds.
		Weight::from_parts(19_387_965, 7722)
			// Standard Error: 11_580
			.saturating_add(Weight::from_parts(251_230, 0).saturating_mul(n.into()))
			// Standard Error: 11_580
			.saturating_add(Weight::from_parts(1_933_115, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Council::ProposalOf` (r:1 w:1)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Proposals` (r:1 w:1)
	/// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::ProposalCount` (r:1 w:1)
	/// Proof: `Council::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Voting` (r:0 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn propose_to_be_provider_v2() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147`
		//  Estimated: `4107`
		// Minimum execution time: 40_547_000 picoseconds.
		Weight::from_parts(41_747_000, 4107)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	fn reindex_offchain() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_881_000 picoseconds.
		Weight::from_parts(6_178_000, 0)
	}
	/// Storage: `Msa::PayloadSignatureRegistryList` (r:2 w:2)
	/// Proof: `Msa::PayloadSignatureRegistryList` (`max_values`: Some(50000), `max_size`: Some(144), added: 2124, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PayloadSignatureRegistryPointer` (r:1 w:1)
	/// Proof: `Msa::PayloadSignatureRegistryPointer` (`max_values`: Some(1), `max_size`: Some(140), added: 635, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn withdraw_tokens() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1233`
		//  Estimated: `6691`
		// Minimum execution time: 84_513_000 picoseconds.
		Weight::from_parts(86_349_000, 6691)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `Msa::PayloadSignatureRegistryList` (r:2 w:2)
	/// Proof: `Msa::PayloadSignatureRegistryList` (`max_values`: Some(50000), `max_size`: Some(144), added: 2124, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PayloadSignatureRegistryPointer` (r:1 w:1)
	/// Proof: `Msa::PayloadSignatureRegistryPointer` (`max_values`: Some(1), `max_size`: Some(140), added: 635, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::MsaIdToRecoveryCommitment` (r:0 w:1)
	/// Proof: `Msa::MsaIdToRecoveryCommitment` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	fn add_recovery_commitment() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1112`
		//  Estimated: `5733`
		// Minimum execution time: 125_320_000 picoseconds.
		Weight::from_parts(127_783_000, 5733)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Msa::RecoveryProviders` (r:0 w:1)
	/// Proof: `Msa::RecoveryProviders` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	fn remove_recovery_provider() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_245_000 picoseconds.
		Weight::from_parts(7_548_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ProviderToRegistryEntryV2` (r:1 w:0)
	/// Proof: `Msa::ProviderToRegistryEntryV2` (`max_values`: None, `max_size`: Some(3762), added: 6237, mode: `MaxEncodedLen`)
	/// Storage: `Msa::RecoveryProviders` (r:1 w:1)
	/// Proof: `Msa::RecoveryProviders` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	fn approve_recovery_provider() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `78`
		//  Estimated: `7722`
		// Minimum execution time: 16_919_000 picoseconds.
		Weight::from_parts(17_204_000, 7722)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::DelegatorAndProviderToDelegation` (r:1 w:0)
	/// Proof: `Msa::DelegatorAndProviderToDelegation` (`max_values`: None, `max_size`: Some(217), added: 2692, mode: `MaxEncodedLen`)
	fn check_free_extrinsic_use_revoke_delegation_by_provider() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `161`
		//  Estimated: `4177`
		// Minimum execution time: 12_349_000 picoseconds.
		Weight::from_parts(12_619_000, 4177)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::DelegatorAndProviderToDelegation` (r:1 w:0)
	/// Proof: `Msa::DelegatorAndProviderToDelegation` (`max_values`: None, `max_size`: Some(217), added: 2692, mode: `MaxEncodedLen`)
	fn check_free_extrinsic_use_revoke_delegation_by_delegator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `161`
		//  Estimated: `4177`
		// Minimum execution time: 12_176_000 picoseconds.
		Weight::from_parts(12_702_000, 4177)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:2 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	fn check_free_extrinsic_use_delete_msa_public_key() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `124`
		//  Estimated: `6531`
		// Minimum execution time: 11_320_000 picoseconds.
		Weight::from_parts(11_833_000, 6531)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ProviderToRegistryEntryV2` (r:1 w:0)
	/// Proof: `Msa::ProviderToRegistryEntryV2` (`max_values`: None, `max_size`: Some(3762), added: 6237, mode: `MaxEncodedLen`)
	/// Storage: `Handles::MSAIdToDisplayName` (r:1 w:0)
	/// Proof: `Handles::MSAIdToDisplayName` (`max_values`: None, `max_size`: Some(59), added: 2534, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PublicKeyCountForMsaId` (r:1 w:0)
	/// Proof: `Msa::PublicKeyCountForMsaId` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	/// Storage: `Msa::DelegatorAndProviderToDelegation` (r:1 w:0)
	/// Proof: `Msa::DelegatorAndProviderToDelegation` (`max_values`: None, `max_size`: Some(217), added: 2692, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn check_free_extrinsic_use_retire_msa() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `113`
		//  Estimated: `7722`
		// Minimum execution time: 23_213_000 picoseconds.
		Weight::from_parts(23_944_000, 7722)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:2 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PayloadSignatureRegistryList` (r:1 w:0)
	/// Proof: `Msa::PayloadSignatureRegistryList` (`max_values`: Some(50000), `max_size`: Some(144), added: 2124, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PayloadSignatureRegistryPointer` (r:1 w:0)
	/// Proof: `Msa::PayloadSignatureRegistryPointer` (`max_values`: Some(1), `max_size`: Some(140), added: 635, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn check_free_extrinsic_use_withdraw_tokens() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `753`
		//  Estimated: `6531`
		// Minimum execution time: 125_126_000 picoseconds.
		Weight::from_parts(127_954_000, 6531)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:2 w:1)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::RecoveryProviders` (r:1 w:0)
	/// Proof: `Msa::RecoveryProviders` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	/// Storage: `Msa::MsaIdToRecoveryCommitment` (r:1 w:1)
	/// Proof: `Msa::MsaIdToRecoveryCommitment` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PayloadSignatureRegistryList` (r:2 w:2)
	/// Proof: `Msa::PayloadSignatureRegistryList` (`max_values`: Some(50000), `max_size`: Some(144), added: 2124, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PayloadSignatureRegistryPointer` (r:1 w:1)
	/// Proof: `Msa::PayloadSignatureRegistryPointer` (`max_values`: Some(1), `max_size`: Some(140), added: 635, mode: `MaxEncodedLen`)
	/// Storage: `Msa::PublicKeyCountForMsaId` (r:1 w:1)
	/// Proof: `Msa::PublicKeyCountForMsaId` (`max_values`: None, `max_size`: Some(17), added: 2492, mode: `MaxEncodedLen`)
	fn recover_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1224`
		//  Estimated: `6531`
		// Minimum execution time: 153_589_000 picoseconds.
		Weight::from_parts(162_426_000, 6531)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ProviderToRegistryEntryV2` (r:1 w:0)
	/// Proof: `Msa::ProviderToRegistryEntryV2` (`max_values`: None, `max_size`: Some(3762), added: 6237, mode: `MaxEncodedLen`)
	/// Storage: `Council::ProposalOf` (r:1 w:1)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Proposals` (r:1 w:1)
	/// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::ProposalCount` (r:1 w:1)
	/// Proof: `Council::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Voting` (r:0 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn propose_to_add_application() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `155`
		//  Estimated: `7722`
		// Minimum execution time: 44_983_000 picoseconds.
		Weight::from_parts(46_738_000, 7722)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ProviderToRegistryEntryV2` (r:1 w:0)
	/// Proof: `Msa::ProviderToRegistryEntryV2` (`max_values`: None, `max_size`: Some(3762), added: 6237, mode: `MaxEncodedLen`)
	/// Storage: `Msa::NextApplicationIndex` (r:1 w:1)
	/// Proof: `Msa::NextApplicationIndex` (`max_values`: None, `max_size`: Some(18), added: 2493, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ProviderToApplicationRegistry` (r:1 w:1)
	/// Proof: `Msa::ProviderToApplicationRegistry` (`max_values`: None, `max_size`: Some(3772), added: 6247, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ApprovedLogos` (r:0 w:1)
	/// Proof: `Msa::ApprovedLogos` (`max_values`: None, `max_size`: Some(131150), added: 133625, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[0, 10]`.
	/// The range of component `m` is `[0, 10]`.
	fn create_application_via_governance(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `79`
		//  Estimated: `7732`
		// Minimum execution time: 31_459_000 picoseconds.
		Weight::from_parts(32_485_956, 7732)
			// Standard Error: 61_742
			.saturating_add(Weight::from_parts(27_105, 0).saturating_mul(n.into()))
			// Standard Error: 61_742
			.saturating_add(Weight::from_parts(1_997_662, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ProviderToRegistryEntryV2` (r:1 w:0)
	/// Proof: `Msa::ProviderToRegistryEntryV2` (`max_values`: None, `max_size`: Some(3762), added: 6237, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ApprovedLogos` (r:1 w:1)
	/// Proof: `Msa::ApprovedLogos` (`max_values`: None, `max_size`: Some(131150), added: 133625, mode: `MaxEncodedLen`)
	fn upload_logo() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `123`
		//  Estimated: `135110`
		// Minimum execution time: 289_928_000 picoseconds.
		Weight::from_parts(301_312_000, 135110)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ProviderToRegistryEntryV2` (r:1 w:0)
	/// Proof: `Msa::ProviderToRegistryEntryV2` (`max_values`: None, `max_size`: Some(3762), added: 6237, mode: `MaxEncodedLen`)
	/// Storage: `Council::ProposalOf` (r:1 w:1)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Proposals` (r:1 w:1)
	/// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::ProposalCount` (r:1 w:1)
	/// Proof: `Council::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Voting` (r:0 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn propose_to_update_provider() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `155`
		//  Estimated: `7722`
		// Minimum execution time: 43_766_000 picoseconds.
		Weight::from_parts(45_476_000, 7722)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ProviderToRegistryEntryV2` (r:1 w:0)
	/// Proof: `Msa::ProviderToRegistryEntryV2` (`max_values`: None, `max_size`: Some(3762), added: 6237, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ProviderToApplicationRegistry` (r:1 w:1)
	/// Proof: `Msa::ProviderToApplicationRegistry` (`max_values`: None, `max_size`: Some(3772), added: 6247, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ApprovedLogos` (r:0 w:1)
	/// Proof: `Msa::ApprovedLogos` (`max_values`: None, `max_size`: Some(131150), added: 133625, mode: `MaxEncodedLen`)
	fn update_application_via_governance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `852`
		//  Estimated: `7732`
		// Minimum execution time: 75_338_000 picoseconds.
		Weight::from_parts(76_360_000, 7732)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ProviderToRegistryEntryV2` (r:1 w:0)
	/// Proof: `Msa::ProviderToRegistryEntryV2` (`max_values`: None, `max_size`: Some(3762), added: 6237, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ProviderToApplicationRegistry` (r:1 w:0)
	/// Proof: `Msa::ProviderToApplicationRegistry` (`max_values`: None, `max_size`: Some(3772), added: 6247, mode: `MaxEncodedLen`)
	/// Storage: `Council::ProposalOf` (r:1 w:1)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Proposals` (r:1 w:1)
	/// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::ProposalCount` (r:1 w:1)
	/// Proof: `Council::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Voting` (r:0 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn propose_to_update_application() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `173`
		//  Estimated: `7732`
		// Minimum execution time: 48_518_000 picoseconds.
		Weight::from_parts(49_509_000, 7732)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Msa::PublicKeyToMsaId` (r:1 w:0)
	/// Proof: `Msa::PublicKeyToMsaId` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ProviderToRegistryEntryV2` (r:1 w:1)
	/// Proof: `Msa::ProviderToRegistryEntryV2` (`max_values`: None, `max_size`: Some(3762), added: 6237, mode: `MaxEncodedLen`)
	/// Storage: `Msa::ApprovedLogos` (r:0 w:1)
	/// Proof: `Msa::ApprovedLogos` (`max_values`: None, `max_size`: Some(131150), added: 133625, mode: `MaxEncodedLen`)
	fn update_provider_via_governance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `833`
		//  Estimated: `7722`
		// Minimum execution time: 56_798_000 picoseconds.
		Weight::from_parts(57_982_000, 7722)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}


#[cfg(test)]
mod tests {
  use frame_support::{traits::Get, weights::Weight, dispatch::DispatchClass};
  use common_runtime::constants::{MAXIMUM_BLOCK_WEIGHT, NORMAL_DISPATCH_RATIO};
  use common_runtime::weights::extrinsic_weights::ExtrinsicBaseWeight;

  #[allow(dead_code)]
  struct BlockWeights;
  impl Get<frame_system::limits::BlockWeights> for BlockWeights {
  	fn get() -> frame_system::limits::BlockWeights {
  		frame_system::limits::BlockWeights::builder()
  			.base_block(Weight::zero())
  			.for_class(DispatchClass::all(), |weights| {
  				weights.base_extrinsic = ExtrinsicBaseWeight::get();
  			})
  			.for_class(DispatchClass::non_mandatory(), |weights| {
  				weights.max_total = Some(NORMAL_DISPATCH_RATIO * MAXIMUM_BLOCK_WEIGHT);
  			})
  			.build_or_panic()
  	}
  }

	#[test]
	fn test_create() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4008
		);
	}
	#[test]
	fn test_create_sponsored_account_with_delegation() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 7722
		);
	}
	#[test]
	fn test_revoke_delegation_by_provider() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4177
		);
	}
	#[test]
	fn test_add_public_key_to_msa() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 9981
		);
	}
	#[test]
	fn test_delete_msa_public_key() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 6531
		);
	}
	#[test]
	fn test_retire_msa() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4008
		);
	}
	#[test]
	fn test_grant_delegation() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 7722
		);
	}
	#[test]
	fn test_revoke_delegation_by_delegator() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4177
		);
	}
	#[test]
	fn test_create_provider() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 7722
		);
	}
	#[test]
	fn test_create_provider_via_governance_v2() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 7722
		);
	}
	#[test]
	fn test_propose_to_be_provider_v2() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4107
		);
	}
	#[test]
	fn test_withdraw_tokens() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 6691
		);
	}
	#[test]
	fn test_add_recovery_commitment() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 5733
		);
	}
	#[test]
	fn test_approve_recovery_provider() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 7722
		);
	}
	#[test]
	fn test_check_free_extrinsic_use_revoke_delegation_by_provider() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4177
		);
	}
	#[test]
	fn test_check_free_extrinsic_use_revoke_delegation_by_delegator() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 4177
		);
	}
	#[test]
	fn test_check_free_extrinsic_use_delete_msa_public_key() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 6531
		);
	}
	#[test]
	fn test_check_free_extrinsic_use_retire_msa() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 7722
		);
	}
	#[test]
	fn test_check_free_extrinsic_use_withdraw_tokens() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 6531
		);
	}
	#[test]
	fn test_recover_account() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 6531
		);
	}
	#[test]
	fn test_propose_to_add_application() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 7722
		);
	}
	#[test]
	fn test_create_application_via_governance() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 7732
		);
	}
	#[test]
	fn test_upload_logo() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 135110
		);
	}
	#[test]
	fn test_propose_to_update_provider() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 7722
		);
	}
	#[test]
	fn test_update_application_via_governance() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 7732
		);
	}
	#[test]
	fn test_propose_to_update_application() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 7732
		);
	}
	#[test]
	fn test_update_provider_via_governance() {
		assert!(
			BlockWeights::get()
				.per_class
				.get(frame_support::dispatch::DispatchClass::Normal)
				.max_extrinsic
				.unwrap_or_else(<Weight as sp_runtime::traits::Bounded>::max_value)
				.proof_size()
				> 7722
		);
	}
}
